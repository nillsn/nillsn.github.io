(()=>{"use strict";const t={404:!0,index:!0,config:!0,game:!0};class e{static html='<app-component name="header"></app-component> <app-component name="main"></app-component> <app-component name="footer"></app-component>'}class r{static throwErrorIfUndefined(t){if(void 0===t)throw new Error("PropertyGuardError: parameter is undefined")}static throwErrorIfNoString(t){if("string"!=typeof t)throw new Error("PropertyGuardError: parameter is not a string")}static throwErrorIfNoArrayOfStrings(t){t.forEach((t=>{try{this.throwErrorIfNoString(t)}catch{throw new Error("PropertyGuardError: parameter is not an array of strings")}}))}static throwErrorIfNoNumber(t){if("number"!=typeof t)throw new Error("PropertyGuardError: parameter is not a number")}static throwErrorIfNoArrayOfNumbers(t){t.forEach((t=>{try{this.throwErrorIfNoNumber(t)}catch{throw new Error("PropertyGuardError: parameter is not an array of numbers")}}))}static throwErrorIfNoBoolean(t){if("boolean"!=typeof t)throw new Error("PropertyGuardError: parameter is not a boolean")}static throwErrorIfNoArrayOfBooleans(t){t.forEach((t=>{try{this.throwErrorIfNoBoolean(t)}catch{throw new Error("PropertyGuardError: parameter is not an array of booleans")}}))}static throwErrorIfNoArray(t){if(!1===Array.isArray(t))throw new Error("PropertyGuardError: parameter is not an array")}static throwErrorIfNoObject(t){if("object"!=typeof t)throw new Error("PropertyGuardError: parameter is not an object")}static throwErrorIfNoArrayOfObjects(t){t.forEach((t=>{try{this.throwErrorIfNoObject(t)}catch{throw new Error("PropertyGuardError: parameter is not an array of objects")}}))}static throwErrorIfItemIsNotInArray(t,e){if(this.throwErrorIfUndefined(t),this.throwErrorIfNoArray(e),!1===e.includes(t))throw new Error("PropertyGuardError: item is not part of the array")}}class o{static create(t){r.throwErrorIfNoArrayOfStrings(t);const e={};return t.forEach((t=>{e[t]={sets:0,legs:0,required:501,throws:[],average:"-",highestScore:"-",highestFinish:"-",currentLegThrows:[]}})),{playerNames:t,playerStats:e}}static buildPlayerStatsArray(t){o.validate(t);const{playerNames:e,playerStats:r}=t,a=[];return e.forEach((t=>{const e=r[t],o={name:t,sets:e.sets,legs:e.legs,required:e.required,throws:e.throws,average:e.average,highestScore:e.highestScore,highestFinish:e.highestFinish};"-"!==o.average&&(o.average=Number.parseFloat(o.average).toFixed(2)),a.push(o)})),a}static getNextPlayer(t){o.validate(t);let e=0,r=0;t.playerNames.forEach((o=>{const a=t.playerStats[o];e+=a.sets,r+=a.legs}));const a=class{static rotate(t,e,r){const o=JSON.parse(JSON.stringify(t)),a=e+r;for(let t=0;t<a;t+=1)o.push(o.shift());return o}}.rotate(t.playerNames,e,r);let n=a[0],s=t.playerStats[n].currentLegThrows.length;for(let e=1;e<a.length;e+=1){const r=a[e],o=t.playerStats[r].currentLegThrows.length;o<s&&(n=r,s=o)}return n}static submitScore(t,e){if(o.validate(t),r.throwErrorIfNoNumber(e),e<0||e>180)return t;const a=o.getNextPlayer(t),n=t.playerStats[a];if(e>n.required)return o.submitScore(t,0);n.required-=e,n.throws.push(e),n.currentLegThrows.push(e),("-"===n.highestScore||n.highestScore<e)&&(n.highestScore=e);let s=0;if(n.throws.forEach((t=>{s+=t})),n.average=s/n.throws.length,0===n.required){("-"===n.highestFinish||n.highestFinish<e)&&(n.highestFinish=e),n.legs+=1;let r=!1;3===n.legs&&(r=!0,n.sets+=1),t.playerNames.forEach((e=>{const o=t;o.playerStats[e].required=501,o.playerStats[e].currentLegThrows=[],r&&(o.playerStats[e].legs=0)}))}return t}static validate(t){r.throwErrorIfUndefined(t),r.throwErrorIfNoObject(t);const{playerNames:e,playerStats:o}=t;r.throwErrorIfNoArrayOfStrings(e),r.throwErrorIfNoObject(o)}}class a{static html='<h3>Game Configuration</h3> <input id="player1" type="text" placeholder="Player 1" value="Player 1"> <input id="player2" type="text" placeholder="Player 2" value="Player 2"> <button static="createTwoPlayerGame">Game On</button>';static async createTwoPlayerGame(){const t=[document.getElementById("player1").value,document.getElementById("player2").value],e=o.create(t),r=await a.generateRandomKey(),n=JSON.stringify(e);localStorage.setItem(r,n),window.location=`?route=game&id=${r}`}static async generateRandomKey(){const t=(new TextEncoder).encode(Math.random()),e=await crypto.subtle.digest("SHA-512",t);return Array.from(new Uint8Array(e)).map((t=>t.toString(16).padStart(2,"0"))).join("").substr(0,16)}}class n{static html='<h3>Good Flight!</h3> <table role="grid"> <thead> <tr> <th scope="col">Player</th> <th scope="col">Sets</th> <th scope="col">Legs</th> <th scope="col">Required</th> </tr> </thead> <tbody> <tr forEach="playerStats"> <th scope="row" forEachHere="name">Pelle</th> <td forEachHere="sets">Cell</td> <td forEachHere="legs">Cell</td> <td forEachHere="required">Cell</td> </tr> </tbody> </table> <h3>Next: <span property="nextPlayer"></span></h3> <input id="score" type="number" value="" min="0" max="180"> <button click="submitScore">Submit</button> <h3>Additional Stats</h3> <table role="grid"> <thead> <tr> <th scope="col">Player</th> <th scope="col">Highest Score</th> <th scope="col">Highest Finish</th> <th scope="col">Average</th> </tr> </thead> <tbody> <tr forEach="playerStats"> <th scope="row" forEachHere="name">Pelle</th> <td forEachHere="highestScore">Cell</td> <td forEachHere="highestFinish">Cell</td> <td forEachHere="average">Cell</td> </tr> </tbody> </table>';constructor(){const t=n.getGameId(),e=localStorage.getItem(t);if(null===e)throw new Error("Game ID is invalid!");this.game=JSON.parse(e),this.updateComponent()}static getGameId(){const t=new URLSearchParams(window.location.search).get("id");if(null===t)throw new Error("Game ID is null!");return t}updateComponent(){this.playerStats=o.buildPlayerStatsArray(this.game),this.nextPlayer=o.getNextPlayer(this.game)}submitScore(){const t=document.getElementById("score"),{value:e}=t,r=parseInt(e,10);if(Number.isNaN(r))throw new Error("Invalid score: input ist not a number");if(r<0||r>180)throw new Error(`Invalid score of: ${r}`);this.game=o.submitScore(this.game,r);const a=n.getGameId(),s=JSON.stringify(this.game);localStorage.setItem(a,s),this.updateComponent()}}const s={header:class{static html='<a style="text-decoration:none" href="?route=index"> <h1>VanillaJS</h1> </a>'},main:class{static html='<app-component name="index" route="index"></app-component> <app-component name="pagenotfound" route="404"></app-component> <app-component name="configuration" route="config"></app-component> <app-component name="game" route="game"></app-component>'},index:class{static html='<h3>Index</h3> <ul> <li><a href="?route=config">Create 501 Game (2 Players)</a></li> </ul>'},configuration:a,game:n,footer:class{static html=""},pagenotfound:class{static html='<div class="w3-container"> <h1>#404 - Page Not Found Exception</h1> </div>'}};class i extends HTMLElement{constructor(){super();const t=this.getExpectedRoute(),e=i.getActualRoute();let r;if(void 0===t?r=!0:void 0!==t&&void 0===e?r=!1:void 0!==t&&void 0!==e&&(r=t===e),!0!==r)return;const o=this.getComponentDetails();if(void 0===o){const t=this.getAttribute("name");throw new Error(`ComponentNotFound: ${t}`)}this.component=new o,this.buildPage()}static getActualRoute(){const t=new URLSearchParams(window.location.search).get("route");if(null!==t)return t}getExpectedRoute(){const t=this.getAttribute("route");if(null!==t)return t}getComponentDetails(){const t=this.getAttribute("name");if(null===t)return e;const r=s[t];return void 0!==r?r:void 0}buildPage(){const t=this.getComponentDetails(),{html:e}=t;this.innerHTML=e,this.updateProperties(),this.updateForEach(),this.updateEventListeners()}updateForEach(){this.querySelectorAll("[forEach]").forEach((t=>{const e=t.parentNode,r=t.getAttribute("forEach"),o=this.component[r];void 0!==o&&(o.forEach((r=>{const o=t.cloneNode(!0);o.querySelectorAll("[forEachHere]").forEach((t=>{const e=t.getAttribute("forEachHere");t.innerText=""===e?r:r[e]})),e.append(o)})),t.remove())}))}updateProperties(){this.querySelectorAll("[property]").forEach((t=>{const e=t.getAttribute("property"),r=this.component[e];null===t.getAttribute("isset")&&(t.innerHTML=r,t.setAttribute("isset","YES"))}))}updateEventListeners(){const t=this.querySelectorAll(["[click]"]),e=this.querySelectorAll(["[static]"]);t.forEach((t=>{const e=t.getAttribute("click"),r=t.getAttribute("eventListenerAdded");void 0!==this.component[e]&&null===r&&(t.addEventListener("click",(()=>{this.component[e](),this.buildPage()})),t.setAttribute("eventListenerAdded","eventListenerAdded"))}));const r=this.getComponentDetails();e.forEach((t=>{const e=t.getAttribute("static"),o=t.getAttribute("eventListenerAdded"),a=r[e];void 0!==a&&null===o&&(t.addEventListener("click",(()=>{a(),this.buildPage()})),t.setAttribute("eventListenerAdded","eventListenerAdded"))}))}}(class{static validateRoute(){const e=new URLSearchParams(window.location.search).get("route");null!==e?!0!==t[e]&&window.location.replace("?route=404"):window.location.replace("?route=index")}}).validateRoute(),customElements.define("app-component",i)})();